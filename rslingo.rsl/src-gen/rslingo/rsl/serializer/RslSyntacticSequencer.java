/*
 * generated by Xtext
 */
package rslingo.rsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import rslingo.rsl.services.RslGrammarAccess;

@SuppressWarnings("all")
public class RslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_GlossaryTerm_RightCurlyBracketKeyword_4_1_a;
	protected AbstractElementAlias match_GlossaryTerm_RightCurlyBracketKeyword_4_1_p;
	protected AbstractElementAlias match_Stakeholder_RightCurlyBracketKeyword_2_1_a;
	protected AbstractElementAlias match_Stakeholder_RightCurlyBracketKeyword_2_1_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RslGrammarAccess) access;
		match_GlossaryTerm_RightCurlyBracketKeyword_4_1_a = new TokenAlias(true, true, grammarAccess.getGlossaryTermAccess().getRightCurlyBracketKeyword_4_1());
		match_GlossaryTerm_RightCurlyBracketKeyword_4_1_p = new TokenAlias(true, false, grammarAccess.getGlossaryTermAccess().getRightCurlyBracketKeyword_4_1());
		match_Stakeholder_RightCurlyBracketKeyword_2_1_a = new TokenAlias(true, true, grammarAccess.getStakeholderAccess().getRightCurlyBracketKeyword_2_1());
		match_Stakeholder_RightCurlyBracketKeyword_2_1_p = new TokenAlias(true, false, grammarAccess.getStakeholderAccess().getRightCurlyBracketKeyword_2_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_GlossaryTerm_RightCurlyBracketKeyword_4_1_a.equals(syntax))
				emit_GlossaryTerm_RightCurlyBracketKeyword_4_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_GlossaryTerm_RightCurlyBracketKeyword_4_1_p.equals(syntax))
				emit_GlossaryTerm_RightCurlyBracketKeyword_4_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Stakeholder_RightCurlyBracketKeyword_2_1_a.equals(syntax))
				emit_Stakeholder_RightCurlyBracketKeyword_2_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Stakeholder_RightCurlyBracketKeyword_2_1_p.equals(syntax))
				emit_Stakeholder_RightCurlyBracketKeyword_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'applicationTo' ref=RefTermApplication
	 *     (rule start) (ambiguity) 'description' description=STRING
	 *     (rule start) (ambiguity) 'isA' super=[GlossaryTerm|ID]
	 *     (rule start) (ambiguity) 'synonym' synonym=STRING
	 *     (rule start) (ambiguity) 'term' name=ID
	 *     (rule start) (ambiguity) (rule start)
	 *     acronym=STRING (ambiguity) 'applicationTo' ref=RefTermApplication
	 *     acronym=STRING (ambiguity) 'description' description=STRING
	 *     acronym=STRING (ambiguity) 'isA' super=[GlossaryTerm|ID]
	 *     acronym=STRING (ambiguity) 'synonym' synonym=STRING
	 *     acronym=STRING (ambiguity) 'term' name=ID
	 *     acronym=STRING (ambiguity) (rule end)
	 *     nameAlias=STRING (ambiguity) 'applicationTo' ref=RefTermApplication
	 *     nameAlias=STRING (ambiguity) 'description' description=STRING
	 *     nameAlias=STRING (ambiguity) 'isA' super=[GlossaryTerm|ID]
	 *     nameAlias=STRING (ambiguity) 'synonym' synonym=STRING
	 *     nameAlias=STRING (ambiguity) 'term' name=ID
	 *     nameAlias=STRING (ambiguity) (rule end)
	 *     ref=RefTermApplication (ambiguity) 'applicationTo' ref=RefTermApplication
	 *     ref=RefTermApplication (ambiguity) 'description' description=STRING
	 *     ref=RefTermApplication (ambiguity) 'isA' super=[GlossaryTerm|ID]
	 *     ref=RefTermApplication (ambiguity) 'synonym' synonym=STRING
	 *     ref=RefTermApplication (ambiguity) 'term' name=ID
	 *     ref=RefTermApplication (ambiguity) (rule end)
	 *     super=[GlossaryTerm|ID] (ambiguity) 'applicationTo' ref=RefTermApplication
	 *     super=[GlossaryTerm|ID] (ambiguity) 'description' description=STRING
	 *     super=[GlossaryTerm|ID] (ambiguity) 'isA' super=[GlossaryTerm|ID]
	 *     super=[GlossaryTerm|ID] (ambiguity) 'synonym' synonym=STRING
	 *     super=[GlossaryTerm|ID] (ambiguity) 'term' name=ID
	 *     super=[GlossaryTerm|ID] (ambiguity) (rule end)
	 *     synonym=STRING (ambiguity) 'applicationTo' ref=RefTermApplication
	 *     synonym=STRING (ambiguity) 'description' description=STRING
	 *     synonym=STRING (ambiguity) 'isA' super=[GlossaryTerm|ID]
	 *     synonym=STRING (ambiguity) 'synonym' synonym=STRING
	 *     synonym=STRING (ambiguity) 'term' name=ID
	 *     synonym=STRING (ambiguity) (rule end)
	 */
	protected void emit_GlossaryTerm_RightCurlyBracketKeyword_4_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) 'applicationTo' ref=RefTermApplication
	 *     description=STRING (ambiguity) 'description' description=STRING
	 *     description=STRING (ambiguity) 'isA' super=[GlossaryTerm|ID]
	 *     description=STRING (ambiguity) 'synonym' synonym=STRING
	 *     description=STRING (ambiguity) 'term' name=ID
	 *     description=STRING (ambiguity) (rule end)
	 */
	protected void emit_GlossaryTerm_RightCurlyBracketKeyword_4_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'description' description=STRING
	 *     (rule start) (ambiguity) 'partOf' partOf=[Stakeholder|ID]
	 *     (rule start) (ambiguity) 'stakeholder' name=ID
	 *     (rule start) (ambiguity) (rule start)
	 *     category=StakeholderCategory (ambiguity) 'description' description=STRING
	 *     category=StakeholderCategory (ambiguity) 'partOf' partOf=[Stakeholder|ID]
	 *     category=StakeholderCategory (ambiguity) 'stakeholder' name=ID
	 *     category=StakeholderCategory (ambiguity) (rule end)
	 *     partOf=[Stakeholder|ID] (ambiguity) 'description' description=STRING
	 *     partOf=[Stakeholder|ID] (ambiguity) 'partOf' partOf=[Stakeholder|ID]
	 *     partOf=[Stakeholder|ID] (ambiguity) 'stakeholder' name=ID
	 *     partOf=[Stakeholder|ID] (ambiguity) (rule end)
	 *     super=[Stakeholder|ID] (ambiguity) 'description' description=STRING
	 *     super=[Stakeholder|ID] (ambiguity) 'partOf' partOf=[Stakeholder|ID]
	 *     super=[Stakeholder|ID] (ambiguity) 'stakeholder' name=ID
	 *     super=[Stakeholder|ID] (ambiguity) (rule end)
	 */
	protected void emit_Stakeholder_RightCurlyBracketKeyword_2_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) 'description' description=STRING
	 *     description=STRING (ambiguity) 'partOf' partOf=[Stakeholder|ID]
	 *     description=STRING (ambiguity) 'stakeholder' name=ID
	 *     description=STRING (ambiguity) (rule end)
	 */
	protected void emit_Stakeholder_RightCurlyBracketKeyword_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
