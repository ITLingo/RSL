/*
 * generated by Xtext
 */
package rslingo.rsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import rslingo.rsl.rsl.Actor;
import rslingo.rsl.rsl.ActualSchedule;
import rslingo.rsl.rsl.Attribute;
import rslingo.rsl.rsl.BusinessEntity;
import rslingo.rsl.rsl.Check;
import rslingo.rsl.rsl.Constraint;
import rslingo.rsl.rsl.Date;
import rslingo.rsl.rsl.DetailBEntity;
import rslingo.rsl.rsl.Entity;
import rslingo.rsl.rsl.FR;
import rslingo.rsl.rsl.ForeignKey;
import rslingo.rsl.rsl.GlossaryTerm;
import rslingo.rsl.rsl.Goal;
import rslingo.rsl.rsl.IfStep;
import rslingo.rsl.rsl.Import;
import rslingo.rsl.rsl.MasterBEntity;
import rslingo.rsl.rsl.Model;
import rslingo.rsl.rsl.Month;
import rslingo.rsl.rsl.Multiplicity;
import rslingo.rsl.rsl.Organizations;
import rslingo.rsl.rsl.PackageGlossary;
import rslingo.rsl.rsl.PackageProject;
import rslingo.rsl.rsl.PackageStakeholder;
import rslingo.rsl.rsl.PackageSystem;
import rslingo.rsl.rsl.PlannedSchedule;
import rslingo.rsl.rsl.PrimaryKey;
import rslingo.rsl.rsl.Priority;
import rslingo.rsl.rsl.Progress;
import rslingo.rsl.rsl.Project;
import rslingo.rsl.rsl.QR;
import rslingo.rsl.rsl.RefActor;
import rslingo.rsl.rsl.RefAttribute;
import rslingo.rsl.rsl.RefEntity;
import rslingo.rsl.rsl.RefSystem;
import rslingo.rsl.rsl.RefTermApplication;
import rslingo.rsl.rsl.RefUC;
import rslingo.rsl.rsl.RefUCAction;
import rslingo.rsl.rsl.ReferenceBEntity;
import rslingo.rsl.rsl.RequirementRelation;
import rslingo.rsl.rsl.RslPackage;
import rslingo.rsl.rsl.Scenario;
import rslingo.rsl.rsl.SimpleStep;
import rslingo.rsl.rsl.Stakeholder;
import rslingo.rsl.rsl.State;
import rslingo.rsl.rsl.StateMachine;
import rslingo.rsl.rsl.Step;
import rslingo.rsl.rsl.SystemRelation;
import rslingo.rsl.rsl.TermApplication;
import rslingo.rsl.rsl.Transition;
import rslingo.rsl.rsl.UCAction;
import rslingo.rsl.rsl.UCActions;
import rslingo.rsl.rsl.UCExtends;
import rslingo.rsl.rsl.UCExtensionPoint;
import rslingo.rsl.rsl.UCExtensionPoints;
import rslingo.rsl.rsl.UCIncludes;
import rslingo.rsl.rsl.UseCase;
import rslingo.rsl.services.RslGrammarAccess;

@SuppressWarnings("all")
public class RslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == RslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case RslPackage.ACTOR:
				sequence_Actor(context, (Actor) semanticObject); 
				return; 
			case RslPackage.ACTUAL_SCHEDULE:
				sequence_ActualSchedule(context, (ActualSchedule) semanticObject); 
				return; 
			case RslPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case RslPackage.BUSINESS_ENTITY:
				sequence_BusinessEntity(context, (BusinessEntity) semanticObject); 
				return; 
			case RslPackage.CHECK:
				sequence_Check(context, (Check) semanticObject); 
				return; 
			case RslPackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case RslPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case RslPackage.DETAIL_BENTITY:
				sequence_DetailBEntity(context, (DetailBEntity) semanticObject); 
				return; 
			case RslPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case RslPackage.FR:
				sequence_FR(context, (FR) semanticObject); 
				return; 
			case RslPackage.FOREIGN_KEY:
				sequence_ForeignKey(context, (ForeignKey) semanticObject); 
				return; 
			case RslPackage.GLOSSARY_TERM:
				sequence_GlossaryTerm(context, (GlossaryTerm) semanticObject); 
				return; 
			case RslPackage.GOAL:
				sequence_Goal(context, (Goal) semanticObject); 
				return; 
			case RslPackage.IF_STEP:
				sequence_IfStep(context, (IfStep) semanticObject); 
				return; 
			case RslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case RslPackage.MASTER_BENTITY:
				sequence_MasterBEntity(context, (MasterBEntity) semanticObject); 
				return; 
			case RslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case RslPackage.MONTH:
				sequence_Month(context, (Month) semanticObject); 
				return; 
			case RslPackage.MULTIPLICITY:
				sequence_Multiplicity(context, (Multiplicity) semanticObject); 
				return; 
			case RslPackage.ORGANIZATIONS:
				sequence_Organizations(context, (Organizations) semanticObject); 
				return; 
			case RslPackage.PACKAGE_GLOSSARY:
				sequence_PackageGlossary(context, (PackageGlossary) semanticObject); 
				return; 
			case RslPackage.PACKAGE_PROJECT:
				sequence_PackageProject(context, (PackageProject) semanticObject); 
				return; 
			case RslPackage.PACKAGE_STAKEHOLDER:
				sequence_PackageStakeholder(context, (PackageStakeholder) semanticObject); 
				return; 
			case RslPackage.PACKAGE_SYSTEM:
				sequence_PackageSystem(context, (PackageSystem) semanticObject); 
				return; 
			case RslPackage.PLANNED_SCHEDULE:
				sequence_PlannedSchedule(context, (PlannedSchedule) semanticObject); 
				return; 
			case RslPackage.PRIMARY_KEY:
				sequence_PrimaryKey(context, (PrimaryKey) semanticObject); 
				return; 
			case RslPackage.PRIORITY:
				sequence_Priority(context, (Priority) semanticObject); 
				return; 
			case RslPackage.PROGRESS:
				sequence_Progress(context, (Progress) semanticObject); 
				return; 
			case RslPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case RslPackage.QR:
				sequence_QR(context, (QR) semanticObject); 
				return; 
			case RslPackage.REF_ACTOR:
				sequence_RefActor(context, (RefActor) semanticObject); 
				return; 
			case RslPackage.REF_ATTRIBUTE:
				sequence_RefAttribute(context, (RefAttribute) semanticObject); 
				return; 
			case RslPackage.REF_ENTITY:
				sequence_RefEntity(context, (RefEntity) semanticObject); 
				return; 
			case RslPackage.REF_SYSTEM:
				sequence_RefSystem(context, (RefSystem) semanticObject); 
				return; 
			case RslPackage.REF_TERM_APPLICATION:
				sequence_RefTermApplication(context, (RefTermApplication) semanticObject); 
				return; 
			case RslPackage.REF_UC:
				sequence_RefUC(context, (RefUC) semanticObject); 
				return; 
			case RslPackage.REF_UC_ACTION:
				sequence_RefUCAction(context, (RefUCAction) semanticObject); 
				return; 
			case RslPackage.REFERENCE_BENTITY:
				sequence_ReferenceBEntity(context, (ReferenceBEntity) semanticObject); 
				return; 
			case RslPackage.REQUIREMENT_RELATION:
				sequence_RequirementRelation(context, (RequirementRelation) semanticObject); 
				return; 
			case RslPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case RslPackage.SIMPLE_STEP:
				sequence_SimpleStep(context, (SimpleStep) semanticObject); 
				return; 
			case RslPackage.STAKEHOLDER:
				sequence_Stakeholder(context, (Stakeholder) semanticObject); 
				return; 
			case RslPackage.STATE:
				if(context == grammarAccess.getStateRule()) {
					sequence_State(context, (State) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getStatesRule()) {
					sequence_States(context, (State) semanticObject); 
					return; 
				}
				else break;
			case RslPackage.STATE_MACHINE:
				sequence_StateMachine(context, (StateMachine) semanticObject); 
				return; 
			case RslPackage.STEP:
				sequence_Step(context, (Step) semanticObject); 
				return; 
			case RslPackage.SYSTEM:
				sequence_System(context, (rslingo.rsl.rsl.System) semanticObject); 
				return; 
			case RslPackage.SYSTEM_RELATION:
				sequence_SystemRelation(context, (SystemRelation) semanticObject); 
				return; 
			case RslPackage.TERM_APPLICATION:
				sequence_TermApplication(context, (TermApplication) semanticObject); 
				return; 
			case RslPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case RslPackage.UC_ACTION:
				sequence_UCAction(context, (UCAction) semanticObject); 
				return; 
			case RslPackage.UC_ACTIONS:
				sequence_UCActions(context, (UCActions) semanticObject); 
				return; 
			case RslPackage.UC_EXTENDS:
				sequence_UCExtends(context, (UCExtends) semanticObject); 
				return; 
			case RslPackage.UC_EXTENSION_POINT:
				sequence_UCExtensionPoint(context, (UCExtensionPoint) semanticObject); 
				return; 
			case RslPackage.UC_EXTENSION_POINTS:
				sequence_UCExtensionPoints(context, (UCExtensionPoints) semanticObject); 
				return; 
			case RslPackage.UC_INCLUDES:
				sequence_UCIncludes(context, (UCIncludes) semanticObject); 
				return; 
			case RslPackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=ActorType 
	 *         nameAlias=STRING 
	 *         stakeholder=[Stakeholder|ID]? 
	 *         super=[Actor|ID]? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_Actor(EObject context, Actor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (start=Date end=Date?)
	 */
	protected void sequence_ActualSchedule(EObject context, ActualSchedule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=AttributeType 
	 *         (size=INT subsize=INT?)? 
	 *         nameAlias=STRING 
	 *         multiplicity=Multiplicity? 
	 *         defaultValue=STRING? 
	 *         notNull='NotNull'? 
	 *         unique='Unique'? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_Attribute(EObject context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=BusinessEntityType 
	 *         nameAlias=STRING 
	 *         master=MasterBEntity 
	 *         detail=DetailBEntity? 
	 *         reference=ReferenceBEntity? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_BusinessEntity(EObject context, BusinessEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID checkExpression=STRING)
	 */
	protected void sequence_Check(EObject context, Check semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.CHECK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.CHECK__NAME));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.CHECK__CHECK_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.CHECK__CHECK_EXPRESSION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getCheckAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCheckAccess().getCheckExpressionSTRINGTerminalRuleCall_2_0(), semanticObject.getCheckExpression());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=ConstraintType 
	 *         subType=ConstraintSubType? 
	 *         nameAlias=STRING 
	 *         stakeholder=[Stakeholder|ID]? 
	 *         partOf=[Constraint|ID]? 
	 *         priority=Priority? 
	 *         progress=Progress? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_Constraint(EObject context, Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (day=INT month=Month year=INT)
	 */
	protected void sequence_Date(EObject context, Date semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.DATE__DAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.DATE__DAY));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.DATE__MONTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.DATE__MONTH));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.DATE__YEAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.DATE__YEAR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDateAccess().getDayINTTerminalRuleCall_0_0(), semanticObject.getDay());
		feeder.accept(grammarAccess.getDateAccess().getMonthMonthParserRuleCall_2_0(), semanticObject.getMonth());
		feeder.accept(grammarAccess.getDateAccess().getYearINTTerminalRuleCall_4_0(), semanticObject.getYear());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (entityDetail=[Entity|ID] refEntity=RefEntity?)
	 */
	protected void sequence_DetailBEntity(EObject context, DetailBEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=EntityType 
	 *         nameAlias=STRING 
	 *         super=[Entity|ID]? 
	 *         attributes+=Attribute+ 
	 *         primaryKey=PrimaryKey? 
	 *         foreignKeys+=ForeignKey* 
	 *         checks+=Check* 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_Entity(EObject context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=FRType 
	 *         nameAlias=STRING 
	 *         stakeholder=[Stakeholder|ID]? 
	 *         partOf=[FR|ID]? 
	 *         priority=Priority? 
	 *         progress=Progress? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_FR(EObject context, FR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (fentity=[Entity|ID] refTo=RefAttribute)
	 */
	protected void sequence_ForeignKey(EObject context, ForeignKey semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.FOREIGN_KEY__FENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.FOREIGN_KEY__FENTITY));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.FOREIGN_KEY__REF_TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.FOREIGN_KEY__REF_TO));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getForeignKeyAccess().getFentityEntityIDTerminalRuleCall_1_0_1(), semanticObject.getFentity());
		feeder.accept(grammarAccess.getForeignKeyAccess().getRefToRefAttributeParserRuleCall_3_0(), semanticObject.getRefTo());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=TermType 
	 *         nameAlias=STRING 
	 *         acronym=STRING? 
	 *         ref=RefTermApplication? 
	 *         synonym=STRING? 
	 *         super=[GlossaryTerm|ID]? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_GlossaryTerm(EObject context, GlossaryTerm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=GoalType 
	 *         nameAlias=STRING 
	 *         stakeholder=[Stakeholder|ID]? 
	 *         partOf=[Goal|ID]? 
	 *         priority=Priority? 
	 *         progress=Progress? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_Goal(EObject context, Goal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (action=[UCAction|QualifiedName] steps+=Step+)
	 */
	protected void sequence_IfStep(EObject context, IfStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_Import(EObject context, Import semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     masterEntity=[Entity|ID]
	 */
	protected void sequence_MasterBEntity(EObject context, MasterBEntity semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.MASTER_BENTITY__MASTER_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.MASTER_BENTITY__MASTER_ENTITY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMasterBEntityAccess().getMasterEntityEntityIDTerminalRuleCall_1_0_1(), semanticObject.getMasterEntity());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     packages+=PackageAbstract*
	 */
	protected void sequence_Model(EObject context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name='Jan' | 
	 *         name='Feb' | 
	 *         name='Mar' | 
	 *         name='Apr' | 
	 *         name='May' | 
	 *         name='Jun' | 
	 *         name='Jul' | 
	 *         name='Aug' | 
	 *         name='Sep' | 
	 *         name='Oct' | 
	 *         name='Nov' | 
	 *         name='Dec'
	 *     )
	 */
	protected void sequence_Month(EObject context, Month semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value='"0"' | value='"1"' | value='"0..1"' | value='"*"' | value=STRING)
	 */
	protected void sequence_Multiplicity(EObject context, Multiplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (customer=STRING supplier=STRING partners=STRING)
	 */
	protected void sequence_Organizations(EObject context, Organizations semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.ORGANIZATIONS__CUSTOMER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.ORGANIZATIONS__CUSTOMER));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.ORGANIZATIONS__SUPPLIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.ORGANIZATIONS__SUPPLIER));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.ORGANIZATIONS__PARTNERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.ORGANIZATIONS__PARTNERS));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getOrganizationsAccess().getCustomerSTRINGTerminalRuleCall_3_0(), semanticObject.getCustomer());
		feeder.accept(grammarAccess.getOrganizationsAccess().getSupplierSTRINGTerminalRuleCall_5_0(), semanticObject.getSupplier());
		feeder.accept(grammarAccess.getOrganizationsAccess().getPartnersSTRINGTerminalRuleCall_7_0(), semanticObject.getPartners());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=QualifiedName imports+=Import* glossaryTerms+=GlossaryTerm+)
	 */
	protected void sequence_PackageGlossary(EObject context, PackageGlossary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         imports+=Import* 
	 *         project=Project 
	 *         packageGlossaries+=PackageGlossary* 
	 *         packageStakeholders+=PackageStakeholder* 
	 *         packageSystems+=PackageSystem* 
	 *         systemRelations+=SystemRelation*
	 *     )
	 */
	protected void sequence_PackageProject(EObject context, PackageProject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=QualifiedName imports+=Import* stakeholders+=Stakeholder+)
	 */
	protected void sequence_PackageStakeholder(EObject context, PackageStakeholder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         imports+=Import* 
	 *         system=System 
	 *         entities+=Entity* 
	 *         businessEntities+=BusinessEntity* 
	 *         actors+=Actor* 
	 *         requirements+=Requirement* 
	 *         stateMachine+=StateMachine* 
	 *         requirementRelations+=RequirementRelation* 
	 *         systemRelations+=SystemRelation*
	 *     )
	 */
	protected void sequence_PackageSystem(EObject context, PackageSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (start=Date end=Date)
	 */
	protected void sequence_PlannedSchedule(EObject context, PlannedSchedule semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.PLANNED_SCHEDULE__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.PLANNED_SCHEDULE__START));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.PLANNED_SCHEDULE__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.PLANNED_SCHEDULE__END));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPlannedScheduleAccess().getStartDateParserRuleCall_3_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getPlannedScheduleAccess().getEndDateParserRuleCall_5_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     refTo=RefAttribute
	 */
	protected void sequence_PrimaryKey(EObject context, PrimaryKey semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.PRIMARY_KEY__REF_TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.PRIMARY_KEY__REF_TO));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPrimaryKeyAccess().getRefToRefAttributeParserRuleCall_2_0(), semanticObject.getRefTo());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (value='Must' | value='Should' | value='Could' | value='Won't')
	 */
	protected void sequence_Priority(EObject context, Priority semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         value='NotPlan' | 
	 *         value='Plan' | 
	 *         value='OnDesign' | 
	 *         value='OnDevelop' | 
	 *         value='OnTest' | 
	 *         value='OnDeploy' | 
	 *         value='Concluded'
	 *     )
	 */
	protected void sequence_Progress(EObject context, Progress semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=ProjectType 
	 *         nameAlias=STRING 
	 *         domain=ProjectDomain 
	 *         planned=PlannedSchedule? 
	 *         actual=ActualSchedule? 
	 *         organizations=Organizations? 
	 *         progress=Progress? 
	 *         summary=STRING? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_Project(EObject context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=QRType 
	 *         subType=QRSubType? 
	 *         nameAlias=STRING 
	 *         metric=Metric? 
	 *         value=INT? 
	 *         stakeholder=[Stakeholder|ID]? 
	 *         partOf=[QR|ID]? 
	 *         priority=Priority? 
	 *         progress=Progress? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_QR(EObject context, QR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refs+=[Actor|ID] refs+=[Actor|ID]*)
	 */
	protected void sequence_RefActor(EObject context, RefActor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refAttr+=[Attribute|ID] refAttr+=[Attribute|ID]*)
	 */
	protected void sequence_RefAttribute(EObject context, RefAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refEntity+=[Entity|ID] refEntity+=[Entity|ID]*)
	 */
	protected void sequence_RefEntity(EObject context, RefEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refs+=[System|ID] refs+=[System|ID]*)
	 */
	protected void sequence_RefSystem(EObject context, RefSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (refs+=TermApplication refs+=TermApplication*)
	 */
	protected void sequence_RefTermApplication(EObject context, RefTermApplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (useCase=[UseCase|ID] action=[UCAction|QualifiedName])
	 */
	protected void sequence_RefUCAction(EObject context, RefUCAction semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.REF_UC_ACTION__USE_CASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.REF_UC_ACTION__USE_CASE));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.REF_UC_ACTION__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.REF_UC_ACTION__ACTION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getRefUCActionAccess().getUseCaseUseCaseIDTerminalRuleCall_1_0_1(), semanticObject.getUseCase());
		feeder.accept(grammarAccess.getRefUCActionAccess().getActionUCActionQualifiedNameParserRuleCall_3_0_1(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (refs+=[UseCase|ID] refs+=[UseCase|ID]*)
	 */
	protected void sequence_RefUC(EObject context, RefUC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     refEntity=RefEntity
	 */
	protected void sequence_ReferenceBEntity(EObject context, ReferenceBEntity semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.REFERENCE_BENTITY__REF_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.REFERENCE_BENTITY__REF_ENTITY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getReferenceBEntityAccess().getRefEntityRefEntityParserRuleCall_1_0(), semanticObject.getRefEntity());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=RequirementRelationType source=[Requirement|ID] target=[Requirement|ID] description=STRING?)
	 */
	protected void sequence_RequirementRelation(EObject context, RequirementRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=ScenarioType 
	 *         nameAlias=STRING 
	 *         (mode='Sequential' | mode='Parallel')? 
	 *         description=STRING? 
	 *         steps+=Step*
	 *     )
	 */
	protected void sequence_Scenario(EObject context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         nameAlias=STRING 
	 *         actor=[Actor|ID]? 
	 *         description=STRING? 
	 *         precondition=STRING? 
	 *         postcondition=STRING? 
	 *         next=[Step|ID]?
	 *     )
	 */
	protected void sequence_SimpleStep(EObject context, SimpleStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=StakeholderType 
	 *         nameAlias=STRING 
	 *         category=StakeholderCategory 
	 *         super=[Stakeholder|ID]? 
	 *         partOf=[Stakeholder|ID]? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_Stakeholder(EObject context, Stakeholder semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=StateMachineType 
	 *         nameAlias=STRING 
	 *         entity=[Entity|ID] 
	 *         states=States 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_StateMachine(EObject context, StateMachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         isInitial?='isInitial'? 
	 *         isFinal?='isFinal'? 
	 *         onEntry=STRING? 
	 *         onExit=STRING? 
	 *         transitions+=Transition? 
	 *         transitions+=Transition*
	 *     )
	 */
	protected void sequence_State(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (states+=State*)
	 */
	protected void sequence_States(EObject context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID type=StepOperationType subType=StepOperationSubType? (simpleStep=SimpleStep | subSteps+=Step+ | ifSteps+=IfStep*))
	 */
	protected void sequence_Step(EObject context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=SystemRelationType 
	 *         source=[System|ID] 
	 *         target=[System|ID] 
	 *         category=SystemRelationCategory 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_SystemRelation(EObject context, SystemRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=SystemType 
	 *         nameAlias=STRING 
	 *         scope=SystemScope 
	 *         subSystems=RefSystem? 
	 *         reusableSystems=RefSystem? 
	 *         description=STRING?
	 *     )
	 */
	protected void sequence_System(EObject context, rslingo.rsl.rsl.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value='Stakeholder' | value='System' | value='Actor' | value='Entity' | value='Other')
	 */
	protected void sequence_TermApplication(EObject context, TermApplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ucAction=RefUCAction nextstate=[State|ID]?)
	 */
	protected void sequence_Transition(EObject context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_UCAction(EObject context, UCAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (actions+=UCAction actions+=UCAction*)
	 */
	protected void sequence_UCActions(EObject context, UCActions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (usecase=[UseCase|ID] extensionPoint=[UCExtensionPoint|QualifiedName])
	 */
	protected void sequence_UCExtends(EObject context, UCExtends semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.UC_EXTENDS__USECASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.UC_EXTENDS__USECASE));
			if(transientValues.isValueTransient(semanticObject, RslPackage.Literals.UC_EXTENDS__EXTENSION_POINT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RslPackage.Literals.UC_EXTENDS__EXTENSION_POINT));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getUCExtendsAccess().getUsecaseUseCaseIDTerminalRuleCall_1_0_1(), semanticObject.getUsecase());
		feeder.accept(grammarAccess.getUCExtendsAccess().getExtensionPointUCExtensionPointQualifiedNameParserRuleCall_3_0_1(), semanticObject.getExtensionPoint());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_UCExtensionPoint(EObject context, UCExtensionPoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (extensionPoints+=UCExtensionPoint extensionPoints+=UCExtensionPoint*)
	 */
	protected void sequence_UCExtensionPoints(EObject context, UCExtensionPoints semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     includes+=RefUC
	 */
	protected void sequence_UCIncludes(EObject context, UCIncludes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=UseCaseType 
	 *         nameAlias=STRING 
	 *         actorInitiates=[Actor|ID] 
	 *         actorParticipates+=RefActor? 
	 *         bEntity=[BusinessEntity|ID]? 
	 *         precondition=STRING? 
	 *         postcondition=STRING? 
	 *         actions=UCActions? 
	 *         extensionPoints=UCExtensionPoints? 
	 *         includes=UCIncludes? 
	 *         extends+=UCExtends* 
	 *         stakeholder=[Stakeholder|ID]? 
	 *         priority=Priority? 
	 *         progress=Progress? 
	 *         description=STRING? 
	 *         scenarios+=Scenario*
	 *     )
	 */
	protected void sequence_UseCase(EObject context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
